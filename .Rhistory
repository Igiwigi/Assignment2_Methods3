prior = prior3model$prior,
#save_pars = save_pars(all = TRUE),
sample_prior = T,
file = 'data/model3_fit',
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(
adapt_delta = 0.9,
max_treedepth = 20
),
stan_model_args = list(stanc_options = list("O1"))
)
model4 <- brm(
formula4,
data,
family = gaussian,
prior = prior4model$prior,
#save_pars = save_pars(all = TRUE),
sample_prior = T,
file = 'data/model4_fit',
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(
adapt_delta = 0.9,
max_treedepth = 20
),
stan_model_args = list(stanc_options = list("O1"))
)
# Chunk 11: check_models
plot(model1)
plot(model3)
pp_check(model1, ndraws = 100)
pp_check(model2, ndraws = 100)
pp_check(model3, ndraws = 100)
pp_check(model4, ndraws = 100)
# Chunk 12: compare_models
m1 <- add_criterion(model1, criterion = "loo")
m2 <- add_criterion(model2, criterion = "loo")
m3 <- add_criterion(model3, criterion = "loo")
m4 <- add_criterion(model4, criterion = "loo")
m1
m2
m3
m4
loo_compare( m1, m2, m3, m4)
loo_model_weights( m1, m2, m3, m4)
bayes_R2(m1)
bayes_R2(m2)
bayes_R2(m3)
bayes_R2(m4)
#m4 has highest R2 alongside m1, with a slightly smaller Est. error
# Chunk 13: testing kfold
m1k <- kfold(
m1,
K = 10,
folds = NULL,
file = 'data/model1_kfold'
)
cmdstan_version()
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
g++ --version
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("pkgbuild")
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("pkgbuild")
install.packages("pkgbuild")
install.packages("pkgbuild")
install.packages("pkgbuild")
rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("jsonlite",type="source")
install.packages("jsonlite", type = "source")
knitr::opts_chunk$set(echo = TRUE)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
if(!'cmdstanr' %in% installed.packages()){
remotes::install_github("stan-dev/cmdstanr")
cmdstanr::install_cmdstan()
}
#cmdstanr::check_cmdstan_toolchain(fix = TRUE)
pacman::p_load(
tidyverse,
brms,
patchwork,
ggplot2,
performance,
gridExtra,
knitr,
sjstats
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# install.packages("pkgbuild")
#
# rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
# rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
# writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
# writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
if(!'cmdstanr' %in% installed.packages()){
remotes::install_github("stan-dev/cmdstanr")
cmdstanr::install_cmdstan()
}
#cmdstanr::check_cmdstan_toolchain(fix = TRUE)
pacman::p_load(
tidyverse,
brms,
patchwork,
ggplot2,
performance,
gridExtra,
knitr,
sjstats
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# install.packages("pkgbuild")
#
# rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
# rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
# writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
# writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
# Chunk 2: load_and_reclean_data
data <- read_csv("data/data_clean.csv") %>%
mutate(
Gender = factor(Gender),
Child.ID = factor(Child.ID),
Diagnosis = factor(Diagnosis, levels = c("TD", "ASD"))
)%>%
filter(Child.ID != 1)%>% #1 child only has one visit and a lot of missing values, better to omit
rename(NonVerbal_IQ = MullenRaw, Verbal_IQ = ExpressiveLangRaw)
sapply(data, class)
# Chunk 3: describe_data_prep
first_visit <- data %>%
filter(Visit == 1)
# Chunk 4: describe_data (distribution)
first_visit %>%
group_by(Diagnosis) %>%
summarize(Unique_Diagnoses = n_distinct(Child.ID))
ggplot(first_visit, aes(x = Age, fill = Diagnosis)) +
geom_histogram(binwidth = 5, color = "black") +
labs(title = "Distribution of Age", x = "Age on visit 1", y = "Frequency") +
guides(fill=guide_legend(title="Diagnosis"))
ggplot(first_visit, aes(x = Gender, fill = Diagnosis)) +
geom_bar() +
labs(title = "Distribution of Diagnoses by Gender", x = "Gender", y = "Count")
ggplot(first_visit, aes(x = Child.ID, fill = Diagnosis)) +
geom_bar() +
labs(title = "Distribution of Diagnoses by Ethnicity", x = "Ethnicity", y = "Count")+
facet_wrap(~Ethnicity)
first_visit %>%
group_by(Diagnosis, Ethnicity) %>%
summarize(unique_ethnicity_count = n_distinct(Child.ID))
first_visit %>%
group_by(Ethnicity)%>%
count(Ethnicity)
first_visit %>%
group_by(Gender, Diagnosis) %>%
summarize(Count = n()) %>%
pivot_wider(names_from = Gender, values_from = Count) %>%
mutate(Ratio_Women = F / sum(F), Ratio_Men = M / sum(M))
# Chunk 5: describe_data_visually
#Non-verbal IQ
ggplot(first_visit, aes(x = NonVerbal_IQ, fill = Diagnosis)) +
geom_density(alpha = 0.5) +
labs(title = "Non-verbal IQ", x = "MullenRaw", y = "Density")+
guides(fill = guide_legend(title = "Diagnosis"))
#Verbal IQ
ggplot(first_visit, aes(x = Verbal_IQ, fill = Diagnosis)) +
geom_density(alpha = 0.5) +
labs(title = "Distributions of Verbal IQ", x = "ExpressiveLangRaw", y = "Density")+
guides(fill = guide_legend(title = "Diagnosis"))
#ADOS
ggplot(first_visit, aes(x = ADOS, fill = Diagnosis)) +
geom_density(alpha = 0.5) +
labs(title = "Severity of Autistic Symptoms", x = "ADOS", y = "Density")+
guides(fill = guide_legend(title = "Diagnosis"))
first_visit %>%
group_by(Diagnosis)%>%
summarise(mean_ADOS = mean(ADOS))
#Socialization
ggplot(first_visit, aes(x = Socialization, fill = Diagnosis)) +
geom_density(alpha = 0.5) +
labs(title = "Distributions of Social interaction skills, responsiveness", x = "Socialization", y = "Density")+
guides(fill = guide_legend(title = "Diagnosis"))
#CHI_MLU
ggplot(first_visit, aes(x = CHI_MLU, fill = Diagnosis)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Mean Length of Utterance (child)", x = "MLU", y = "Density") +
guides(fill = guide_legend(title = "Diagnosis"))
# Chunk 6: describe_data (MLU over visits)
#CHI_MLU over time
ggplot(data, aes(x = Visit, y = CHI_MLU, color = Diagnosis)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, aes(group = Diagnosis)) +
labs(title = "Development of MLU Over Time", x = "Visit", y = "Mean Length of Utterance (MLU)") +
theme_minimal()
ggplot(data, aes(x = Visit, y = CHI_MLU, color = Diagnosis)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, aes(group = Child.ID)) +
labs(title = "Development of MLU Over Time", x = "Visit", y = "Mean Length of Utterance (MLU)") +
theme_minimal()
data %>%
group_by(Diagnosis, Visit) %>%
filter(Visit == 1 | Visit == 6)%>%
summarize(mean_MLU = mean(CHI_MLU, na.rm = TRUE), max_MLU = max(CHI_MLU, na.rm = TRUE), min_MLU = min(CHI_MLU, na.rm = TRUE))
data %>%
filter(Visit %in% c(1, 6)) %>%  # Filter for only visits 1 and 6
group_by(Child.ID, Visit, Diagnosis) %>%
summarize(min_MLU = min(CHI_MLU)) %>%
pivot_wider(names_from = Visit, values_from = min_MLU) %>%
filter(`1` > `6`)
# Chunk 7: define_formulas
formula1 <-
brms::bf(CHI_MLU ~ 1 + Visit + Diagnosis + MOT_MLU + Gender + Age + (1|Child.ID) + (1|Visit))
formula2 <-
brms::bf(CHI_MLU ~ 1 + Visit + Diagnosis +  MOT_MLU + Gender + Age + (1 + Visit + ADOS1 ||Child.ID))
formula3 <- brms::bf(CHI_MLU ~ 1 + Visit + Diagnosis + (1 + Visit + ADOS1 + Socialization1||Child.ID))
formula4 <-
brms::bf(CHI_MLU ~ 1 + Visit + Diagnosis + (1 + Visit + ADOS1 + Socialization1 + verbalIQ1 ||Child.ID))
#should I be using Visit variables if trying by 1st visit?
# Chunk 8: define_priors
prior1 <- auto_prior(
formula1,
data = data,
gaussian = T #since outcome variable is continuous and not ordinal, categorical?
)
prior2 <- auto_prior(
formula2,
data = data,
gaussian = T
)
prior3 <- auto_prior(
formula3,
data = data,
gaussian = T
)
prior4 <- auto_prior(
formula4,
data = data,
gaussian = T
)
# Chunk 9: prior predictive checking
model1_prior <- brm(
formula1,
data,
family = gaussian,
prior = priors1,
sample_prior = "only", #draws are drawn solely from the priors, ignoring the likelihood!
file = 'data/model1_prior',
backend = "cmdstanr",
chains = 2,
stan_model_args = list(stanc_options = list("O1"))
)
prior_predictive1 <- pp_check(model1_prior, ndraws = 100)
model2_prior <- brm(
formula2,
data,
family = gaussian,
prior = priors2,
sample_prior = "only", #draws are drawn solely from the priors, ignoring the likelihood!
file = 'data/model2_prior',
backend = "cmdstanr",
chains = 2,
stan_model_args = list(stanc_options = list("O1"))
)
prior_predictive2 <- pp_check(model2_prior, ndraws = 100)
model3_prior <- brm(
formula3,
data,
family = gaussian,
prior = priors3,
sample_prior = "only", #draws are drawn solely from the priors, ignoring the likelihood!
file = 'data/model3_prior',
backend = "cmdstanr",
chains = 2,
stan_model_args = list(stanc_options = list("O1"))
)
prior_predictive3 <- pp_check(model3_prior, ndraws = 100)
model4_prior <- brm(
formula4, #is this stinkying it up?
data,
family = gaussian,
prior = priors4,
sample_prior = "only", #draws are drawn solely from the priors, ignoring the likelihood!
file = 'data/model4_prior',
backend = "cmdstanr",
chains = 2,
stan_model_args = list(stanc_options = list("O1"))
)
prior_predictive4 <- pp_check(model4_prior, ndraws = 100)
prior_predictive1 + prior_predictive2
prior_predictive3 + prior_predictive4
# Chunk 10: fit_model
prior1model <- readRDS('data/model1_prior.rds')
prior2model <- readRDS('data/model2_prior.rds')
prior3model <- readRDS('data/model3_prior.rds')
prior4model <- readRDS('data/model4_prior.rds')
model1 <- brm(
formula1,
data,
family = gaussian,
prior = prior1model$prior,
#save_pars = save_pars(all = TRUE),
sample_prior = T,
file = 'data/model1_fit',
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(
adapt_delta = 0.9,
max_treedepth = 20
),
stan_model_args = list(stanc_options = list("O1"))
)
model2 <- brm(
formula2,
data,
family = gaussian,
prior = prior2model$prior,
#save_pars = save_pars(all = TRUE),
sample_prior = T,
file = 'data/model2_fit',
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(
adapt_delta = 0.9,
max_treedepth = 20
),
stan_model_args = list(stanc_options = list("O1"))
)
model3 <- brm(
formula3,
data,
family = gaussian,
prior = prior3model$prior,
#save_pars = save_pars(all = TRUE),
sample_prior = T,
file = 'data/model3_fit',
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(
adapt_delta = 0.9,
max_treedepth = 20
),
stan_model_args = list(stanc_options = list("O1"))
)
model4 <- brm(
formula4,
data,
family = gaussian,
prior = prior4model$prior,
#save_pars = save_pars(all = TRUE),
sample_prior = T,
file = 'data/model4_fit',
backend = "cmdstanr",
chains = 2,
cores = 2,
threads = threading(2),
control = list(
adapt_delta = 0.9,
max_treedepth = 20
),
stan_model_args = list(stanc_options = list("O1"))
)
# Chunk 11: check_models
plot(model1)
plot(model3)
pp_check(model1, ndraws = 100)
pp_check(model2, ndraws = 100)
pp_check(model3, ndraws = 100)
pp_check(model4, ndraws = 100)
# Chunk 12: compare_models
m1 <- add_criterion(model1, criterion = "loo")
m2 <- add_criterion(model2, criterion = "loo")
m3 <- add_criterion(model3, criterion = "loo")
m4 <- add_criterion(model4, criterion = "loo")
m1
m2
m3
m4
loo_compare( m1, m2, m3, m4)
loo_model_weights( m1, m2, m3, m4)
bayes_R2(m1)
bayes_R2(m2)
bayes_R2(m3)
bayes_R2(m4)
#m4 has highest R2 alongside m1, with a slightly smaller Est. error
# Chunk 13: testing kfold
m1k <- kfold(
m1,
K = 10,
folds = NULL,
file = 'data/model1_kfold'
)
m1k <- kfold(
m1,
K = 10,
folds = NULL,
file = 'data/model1_kfold'
)
pacman::p_load(
tidyverse,
brms,
patchwork,
ggplot2,
performance,
gridExtra,
knitr,
sjstats,
rstan
)
pacman::p_load(
tidyverse,
brms,
patchwork,
ggplot2,
performance,
gridExtra,
knitr,
sjstats,
rstan,
cmdrstanr
)
remotes::install_github("stan-dev/cmdstanr")
cmdstanr::install_cmdstan()
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
if(!'cmdstanr' %in% installed.packages()){
remotes::install_github("stan-dev/cmdstanr")
cmdstanr::install_cmdstan()
}
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
pacman::p_load(
tidyverse,
brms,
patchwork,
ggplot2,
performance,
gridExtra,
knitr,
sjstats,
rstan
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# install.packages("pkgbuild")
#
# rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
# rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
# writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
# writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install_pkgs <- c("mingw-w64-ucrt-x86_64-make", "mingw-w64-ucrt-x86_64-gcc")
processx::run("pacman", args = c("-Sy", install_pkgs, "--noconfirm"))
knitr::opts_chunk$set(echo = TRUE)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
if(!'cmdstanr' %in% installed.packages()){
remotes::install_github("stan-dev/cmdstanr")
cmdstanr::install_cmdstan()
}
#cmdstanr::check_cmdstan_toolchain(fix = TRUE)
pacman::p_load(
tidyverse,
brms,
patchwork,
ggplot2,
performance,
gridExtra,
knitr,
sjstats,
rstan
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# install.packages("pkgbuild")
#
# rt_path = gsub("\\","/",pkgbuild::rtools_path(),fixed=T)
# rt_bin = paste0(substr(rt_path,1,nchar(rt_path)-4),"/mingw_$(WIN)/bin/")
# writeLines(paste0('PATH="',rt_path,';${PATH}"'), con = "~/.Renviron")
# writeLines(paste0('Sys.setenv(BINPREF = "',rt_bin,'")'), con = "~/.Rprofile")
install_pkgs <- c("mingw-w64-ucrt-x86_64-make", "mingw-w64-ucrt-x86_64-gcc")
processx::run("pacman", args = c("-Sy", install_pkgs, "--noconfirm"))
